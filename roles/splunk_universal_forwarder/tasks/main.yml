---
- name: Install Splunk universal forwarder
  unarchive:
    src: "{{ splunk.build_location }}"
    dest: "{{ splunk.opt }}"
    owner: "{{ splunk.user }}"
    group: "{{ splunk.group }}"
    remote_src: "{{ splunk.build_remote_src }}"
  when: ansible_system is match("Linux")

- name: Install Splunk universal forwarder (Windows)
  command: "msiexec /I {{ splunk.build_location }} AGREETOLICENSE=yes LAUNCHSPLUNK=0 INSTALLDIR=C:\\\\opt\\\\splunkforwarder /passive /qn"
  when: ansible_system is match("CYGWIN*|Win32NT")

- name: Generate user-seed.conf
  ini_file:
    dest: "{{ splunk.home }}/etc/system/local/user-seed.conf"
    section: user_info
    option: "{{ item.opt }}"
    value: "{{ item.val }}"
  with_items:
    - { opt: 'USERNAME', val: 'admin' }
    - { opt: 'PASSWORD', val: '{{ splunk.password }}' }
  loop_control:
    label: "{{ item.opt }}"

- include_tasks: pre_splunk_start_commands.yml
  ignore_errors: true

- name: Start Splunk
  command: "{{ splunk.exec }} start --accept-license --answer-yes --no-prompt"

- include_tasks: ../../splunk_common/tasks/enable_s2s_port.yml
- include_tasks: setup_docker_monitoring.yml
  when:
    - docker_monitoring
  ignore_errors: true

- name: Setup output forwarding rules
  ini_file:
    path: "{{ splunk.home }}/etc/system/local/outputs.conf"
    section: tcpout
    option: forwardedindex.0.whitelist
    value: ".*"

# Setup deployment server
# http://docs.splunk.com/Documentation/Splunk/latest/Updating/Configuredeploymentclients
- name: Add a deployment server
  command: "{{splunk.exec}} set deploy-poll {{ splunk.deployment_server }}:{{ splunk.s2s_port }} -auth admin:{{ splunk.password }}"
  register: task_result
  until: task_result.rc == 0
  retries: "{{retry_num}}"
  delay: "{{ delay_num }}"
  when: splunk.deployment_server is defined
  ignore_errors: true
  notify:
    - Restart the splunkd service

- name: Flush restart handlers
  meta: flush_handlers

# Setup forwarding server
# http://docs.splunk.com/Documentation/Splunk/latest/Forwarding/Deployanixdfmanually
- name: Set the current node as a Splunk universal forwarder (discover indexer)
  command: "{{ splunk.exec }} add forward-server {{ item }}:{{ splunk.s2s_port }} -auth admin:{{ splunk.password }}"
  with_items: "{{ groups['splunk_indexer'] }}"
  register: task_result
  until: task_result.rc == 0 or "forwarded-server already present" in task_result.stderr
  retries: "{{retry_num}}"
  delay: "{{ delay_num }}"
  when: "'splunk_indexer' in groups"
  notify:
    - Restart the splunkd service

- name: Set the current node as a Splunk universal forwarder (discover standalone)
  command: "{{ splunk.exec }} add forward-server {{ item }}:{{ splunk.s2s_port }} -auth admin:{{ splunk.password }}"
  with_items: "{{ groups['splunk_standalone'] }}"
  register: task_result
  until: task_result.rc == 0 or "forwarded-server already present" in task_result.stderr
  retries: "{{ retry_num }}"
  delay: "{{ delay_num }}"
  when: "'splunk_standalone' in groups"
  notify:
    - Restart the splunkd service

# Setup monitoring
# http://docs.splunk.com/Documentation/Splunk/latest/Data/MonitorfilesanddirectoriesusingtheCLI
# http://docs.splunk.com/Documentation/Splunk/latest/Data/Monitornetworkports
- name: Add monitoring items
  command: "{{splunk.exec}} add {{ item }} -auth admin:{{ splunk.password }}"
  with_items: "{{ splunk.add }}"
  register: task_result
  until: task_result.rc == 0 or "already exists" in task_result.stderr
  retries: "{{ retry_num }}"
  delay: "{{ delay_num }}"
  when: splunk.add is defined
  ignore_errors: true
  notify:
    - Restart the splunkd service

# Execute other Splunk commands
- name: Execute splunk commands
  command: "{{splunk.exec}} {{ item }}"
  with_items: "{{ splunk.cmd }}"
  register: task_result
  until: task_result.rc == 0 or "already exists" in task_result.stderr
  retries: "{{ retry_num }}"
  delay: "{{ delay_num }}"
  when: splunk.cmd is defined
  ignore_errors: true
  notify:
    - Restart the splunkd service
